/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        HomeRowModtap: HomeRowModtap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROWMODTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            //|OUT_BLE|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q                      &kp W                      &kp F                   &kp P                        &kp B        &kp J    &kp L                        &kp U                   &kp Y                       &mt SINGLE_QUOTE DOUBLE_QUOTES  &kp INTERNATIONAL_1
&kp LCTRL     &HomeRowModtap LEFT_GUI A  &HomeRowModtap LEFT_ALT R  &HomeRowModtap LCTRL S  &HomeRowModtap LEFT_SHIFT T  &kp G        &kp M    &HomeRowModtap LEFT_SHIFT N  &HomeRowModtap RCTRL E  &HomeRowModtap RIGHT_ALT I  &HomeRowModtap RIGHT_GUI O      &kp SEMICOLON
&out OUT_TOG  &kp Z                      &kp X                      &kp C                   &kp D                        &kp V        &kp K    &kp H                        &kp COMMA               &kp DOT                     &kp LEFT_BRACKET                &kp SQT
                                                                    &kp ESCAPE              &kp SPACE                    &kp ENTER    &kp RET  &lt 2 BACKSPACE              &lt 4 DELETE
            >;
        };

        Nav {
            bindings = <
&trans  &trans        &trans        &trans     &trans          &trans    &kp K_REDO    &kp K_PASTE     &kp K_PASTE     &kp K_CUT     &kp K_UNDO  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &kp CAPSLOCK  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT   &trans
&trans  &trans        &trans        &trans     &trans          &trans    &kp INSERT    &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END     &trans
                                    &trans     &trans          &trans    &trans        &trans          &trans
            >;
        };

        Num {
            bindings = <
&trans  &trans  &kp N7  &kp N8                          &kp N9  &kp MINUS           &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans  &kp N4  &kp N5                          &kp N6  &kp PLUS            &trans  &kp LSHFT  &kp LCTRL  &kp RALT  &kp LGUI  &trans
&trans  &trans  &kp N1  &kp N2                          &kp N3  &mt COMMA PERIOD    &trans  &trans     &trans     &trans    &trans    &trans
                        &mt LG(GREATER_THAN) LESS_THAN  &kp N0  &kp EQUAL           &trans  &trans     &trans
            >;
        };

        Sym {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Func {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans             &trans  &trans  &trans
            >;
        };
    };
};
