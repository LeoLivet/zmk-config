/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "aliases.h" //file contains aliases for most symbols for the danish language
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        kp_dk_LBKT: kp_dk_LBKT {
            label = "kp_dk_LBKT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp N8>,
                <&macro_release>,
                <&kp RALT>;
        };

        kp_dk_RBKT: kp_dk_RBKT {
            label = "kp_dk_RBKT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp N9>,
                <&macro_release>,
                <&kp RALT>;
        };

        kp_dk_LBRC: kp_dk_LBRC {
            label = "kp_dk_LBRC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp N7>,
                <&macro_release>,
                <&kp RALT>;
        };

        kp_dk_RBRC: kp_dk_RBRC {
            label = "kp_dk_RBRC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp N0>,
                <&macro_release>,
                <&kp RALT>;
        };

        copy: copy {
            label = "copy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        dk_paste: dk_paste {
            label = "dk_paste";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        del_word: del_word {
            label = "del_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp BACKSPACE>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        kp_dk_BLSH: kp_dk_BLSH {
            label = "kp_dk_BLSH";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp NON_US_BACKSLASH>,
                <&macro_release>,
                <&kp RALT>;
        };

        kp_dk_PIPE: kp_dk_PIPE {
            label = "kp_dk_PIPE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_release>,
                <&kp RALT>;
        };

        kp_dk_UNDER: kp_dk_UNDER {
            label = "kp_dk_UNDER";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&kp FSLH>,
                <&macro_release>,
                <&kp LSHIFT>;
        };

        mod_left: mod_left {
            label = "mod_left";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        mod_up: mod_up {
            label = "mod_up";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp UP>,
                <&macro_release>,
                <&kp LGUI>;
        };

        mod_right: mod_right {
            label = "mod_right";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        mod_down: mod_down {
            label = "mod_down";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp LGUI>;
        };
    };

    behaviors {
        hrmt: hrmt {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  P  | BSPC |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  ;  |  '   |
            //|OUT_BLE|  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q             &kp W             &kp F          &kp P               &kp B      &kp J        &kp L               &kp U          &kp Y              &mt SINGLE_QUOTE DOUBLE_QUOTES  &kp SEMICOLON
&kp LCTRL     &hrmt LEFT_GUI A  &hrmt LEFT_ALT R  &hrmt LCTRL S  &hrmt LEFT_SHIFT T  &kp G      &kp M        &hrmt LEFT_SHIFT N  &hrmt RCTRL E  &hrmt RIGHT_ALT I  &hrmt RIGHT_GUI O               &kp SQT
&out OUT_TOG  &kp Z             &kp X             &kp C          &kp D               &kp V      &kp K        &kp H               &kp COMMA      &kp DOT            &kp LEFT_BRACKET                &kp LBKT
                                                  &lt 5 ESCAPE   &lt 1 SPACE         &kp TAB    &lt 3 ENTER  &lt 2 BACKSPACE     &lt 4 DELETE
            >;
        };

        Nav {
            bindings = <
&trans  &trans        &trans        &trans     &studio_unlock  &trans    &kp K_REDO    &kp K_PASTE     &kp K_PASTE     &kp K_CUT     &kp K_UNDO  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &kp CAPSLOCK  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT   &trans
&trans  &trans        &trans        &trans     &trans          &trans    &kp INSERT    &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END     &trans
                                    &trans     &trans          &trans    &trans        &trans          &trans
            >;
        };

        Num {
            bindings = <
&trans  &trans  &kp N7  &kp N8                          &kp N9  &kp MINUS           &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans  &kp N4  &kp N5                          &kp N6  &kp LS(MINUS)       &trans  &kp LSHFT  &kp LCTRL  &kp RALT  &kp LGUI  &trans
&trans  &trans  &kp N1  &kp N2                          &kp N3  &mt COMMA PERIOD    &trans  &trans     &trans     &trans    &trans    &trans
                        &mt LG(GREATER_THAN) LESS_THAN  &kp N0  &kp EQUAL           &trans  &trans     &trans
            >;
        };

        Sym {
            bindings = <
&kp LS(NUMBER_6)  &kp_dk_BLSH       &kp_dk_LBKT      &kp_dk_RBKT          &kp LS(N7)        &kp LS(NON_US_BACKSLASH)    &kp LS(GRAVE)  &trans          &trans     &trans            &trans        &trans
&kp_dk_PIPE       &kp_dk_LBRC       &kp LS(N8)       &kp LS(N9)           &kp_dk_RBRC       &kp RA(RIGHT_BRACKET)       &kp GRAVE      &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT      &kp LEFT_GUI  &trans
&kp_dk_UNDER      &kp RA(NUMBER_2)  &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp LS(NUMBER_1)  &kp LS(N0)                  &kp LS(N5)     &kp MINUS       &kp SLASH  &kp LS(ASTERISK)  &trans        &trans
                                                     &kp LS(MINUS)        &kp LS(N5)        &kp LS(NUMBER_3)            &trans         &trans          &trans
            >;
        };

        Func {
            bindings = <
&studio_unlock  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &trans  &trans  &trans  &trans  &trans  &trans
&trans          &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK     &trans  &trans  &trans  &trans  &trans  &trans
&trans          &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &trans  &trans  &trans  &trans  &trans  &trans
                                 &trans  &trans  &trans             &trans  &trans  &trans
            >;
        };

        Media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_MUTE    &kp C_PP      &kp C_STOP    &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                        &trans  &trans  &trans    &trans  &trans        &trans
            >;
        };
    };
};
